===============================================================
 BlackTank LPC1769
===============================================================

 BlackTank LPC1769はARM Cortex-M3とRTOSを楽しむ事を目的に設計
 した基板です。
 有機ELディスプレイ、４系統ユーザ入力、オーディオコーデック、
 マイクロSDカードなどが１枚の基板に搭載されています。
 ARM Cortex-M3にはNXP SemiconductorsのLPC1769を採用しています。

 また、基板サイズはユニバーサル基板(Sunhayato ICB-293)と同じです。
 実験回路をユニバーサル基板に実装して、ドッキングして使用する
 こともできます。

===============================================================
 ハードウェア設計のポイント
===============================================================

* 人間の特性を考慮すると良い。
  -> 人間は適度な量の入力情報を必要とする。
  -> 人間は沢山の操作をすることができない。

===============================================================
 ファームウェア設計のポイント
===============================================================

* 基本的にイベントドリブンモデルを採用する。
* 出力デバイスに関するタスクはサービスの実装をマクロで隠蔽する。

===============================================================
 タスク設計
===============================================================

1. ユーザインプットタスク(task_userinput)
 ユーザインプットタスクは４系統のユーザ入力の変化を観察する
 タスクです。
 変化があればデータキューを介してシステムコントロールタスクに
 通知されます。

2. メニュータスク(task_menu)
 メニュータスクはユーザにシステムのサービスを提示し、
 ユーザからの要求をシステムに伝達する役目を果たします。

 ユーザは各タスクから次のマクロのみで指示することができます。
 USERMSG(device, value);

 deviceは以下から選択できます。
 スイッチ: SW0, SW1, SW2, SW3
 ボリューム: VOL0, VOL1, VOL2, VOL3

 Typeはビットマッピングです。
 長押し状態フラグ：SW_LONG_PUSH

 このタスクへの指示はデータキューを介して行われます。
 データキュー内部データ構造は以下のようになっています。

 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+
 |15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0| Description      |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+
 |                 |<-          [9:0]          ->| Value            |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+
 |           |11:10|                             | Type             |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+
 |<-[15:12]->|                                   | Device           |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+

3. LEDタスク(task_led)
 LEDタスクはLEDの点灯を制御するタスクです。

 点灯は各タスクから次のマクロのみで指示することができます。
 LEDMSG(target, control);

 targetは以下から選択できます。
 デバッグ用LED: DBLED0, DBLED1, DBLED2, DBLED3
 スイッチ用LED: SWLED0, SWLED1, SWLED2, SWLED3

 controlは以下から選択できます。
 LED点灯：LEDON
 LED消灯：LEDOFF

 このタスクへの指示はデータキューを介して行われます。
 データキュー内部データ構造は以下のようになっています。

 +---+---+---+---+---+---+---+---+-------------+
 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 | Description |
 +---+---+---+---+---+---+---+---+-------------+
 |               |<-   [3:0]   ->| Target      |
 +---+---+---+---+---+---+---+---+-------------+
 |   | x   x   x |               | Reserved    |
 +---+---+---+---+---+---+---+---+-------------+
 |[7]|                           | Control     |
 +---+---+---+---+---+---+---+---+-------------+

4. ディスプレイタスク(task_display)
 ディスプレイタスクは有機ELディスプレイを制御するタスクです。

 ディスプレイの制御は以下のマクロを使って行うことができます。

 DISP_CLEAR(R, G, B);
 DISP_LINE(X1, Y1, X2, Y2, R, G, B);
 DISP_BOX(X1, Y1, X2, Y2, R, G, B);
 DISP_FILLBOX(X1, Y1, X2, Y2, R1, G1, B1, R2, G2, B2);
 DISP_TEXT(X, Y, R, G, B, "TEXT");
 DISP_BMPFILE("0:FILENAME");
 DISP_AUDIO_LEVELMETER(L, R);

 タスク間はメールボックスでやりとりされます。
 マクロはこれを隠蔽した実装としました。
 メールボックスで陥りがちな同期問題を未然に防ぐ対策として
 メモリプール管理機能を使ってデータ領域に対するアクセスを
 管理しています。

 今回の実装では受信側が処理を完了するまで送信側が次の処理に
 遷移しない実装にしてあります。
 今回のタスク設計ではメニュータスクがブロックの対象となります。

5. ナチュラルタイニーシェルタスク(task_ntshell)
 システムをコンソールから制御することのできるインターフェース
 タスクです。

6. オーディオ初期化タスク(task_audio_init)
 オーディオを初期化するためのタスクです。

7. オーディオタスク(task_audio)
 オーディオを処理するためのタスクです。

 このタスクにはパラメータを指定するためのマクロがあります。

 AUDIO_PARAM(TARGET,VALUE);

 * TARGET: VAR0, VAR1, VAR2, VAR3
 * VALUE : The value of the target.

 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+
 |15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0| Description      |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+
 |           |<-            [11:0]             ->| Value            |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+
 |<-[15:12]->|                                   | Target           |
 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+------------------+

 VAR0, VAR1, VAR2, VAR3の各値をどのように使うのかは実装される
 オーディオエフェクトに依存します。
 詳しくはaudio_effect.cを御参照下さい。

===============================================================
 アプリケーション例
===============================================================

* オーディオエフェクタ
* メトロノーム
* 多機能時計
* ピンボールゲーム

===============================================================
 プライオリティ
===============================================================

* ユーザ入力タスクはディスプレイタスクより優先度が高い必要がある。
  表示処理中にユーザ入力があっても処理できる必要があるためである。

===============================================================
 使用上の注意
===============================================================

* OLEDは同じ内容を表示し続けると焼き付きが発生します。
  -> 表示内容を時折変更するようにして下さい。

===============================================================
 ハードウェアテスト項目
===============================================================

 +======+================+===================================+
 |      | 緑ランプ波形   |                                   |
 |      +----------------+-----------------------------------+
 | OLED | 青ランプ波形   |                                   |
 |      +----------------+-----------------------------------+
 |      | 赤ランプ波形   |                                   |
 +------+----------------+-----------------------------------+
 |      | スイッチ入力   |                                   |
 | SW.  +----------------+-----------------------------------+
 |      | スイッチLED    |                                   |
 +------+----------------+-----------------------------------+
 |Volume| スイッチ入力   |                                   |
 +------+----------------+-----------------------------------+
 |DEBLED| スイッチ入力   |                                   |
 +------+----------------+-----------------------------------+
 |      | コーデック     |                                   |
 |      +----------------+-----------------------------------+
 |      | MIC-IN         |                                   |
 |      +----------------+-----------------------------------+
 |AUDIO | LINE-IN        |                                   |
 |      +----------------+-----------------------------------+
 |      | LINE-OUT       |                                   |
 |      +----------------+-----------------------------------+
 |      | PHONE-OUT      |                                   |
 +------+----------------+-----------------------------------+
 | JTAG | JTAG           |                                   |
 +------+----------------+-----------------------------------+
 |      | RESET          |                                   |
 |DEBSW.+----------------+-----------------------------------+
 |      | ISP            |                                   |
 +------+----------------+-----------------------------------+
 | USB  | USB-UART       |                                   |
 +------+----------------+-----------------------------------+
 | SD   | SDCARD         |                                   |
 +------+----------------+-----------------------------------+
 |      | UART1          |                                   |
 |      +----------------+-----------------------------------+
 | UART | UART2          |                                   |
 |      +----------------+-----------------------------------+
 |      | UART3          |                                   |
 +------+----------------+-----------------------------------+
 |      | Main Power     |                                   |
 | RTC  +----------------+-----------------------------------+
 |      | Battery        |                                   |
 +------+----------------+-----------------------------------+
 |      | 5.0V           |                                   |
 |POWER +----------------+-----------------------------------+
 |      | 3.3V           |                                   |
 +------+----------------+-----------------------------------+

===============================================================
 タスクプライオリティ
===============================================================

 タスクプライオリティに関しては以下のように定めた。
 一般にRTOSのプライオリティはサーバ＞クライアントとなる。
 これに層別の視点を加えてプライオリティを決定した。

 10: リアルタイム・タスク
    task_audio
 11: サーバ・タスク
    task_display
    task_led
 12: クライアント・タスク
    task_menu
    task_userinput
 13: イニシャライザ
    task_audio_init
    task_splash
 14: デバッガ
    task_ntshell

===============================================================
 デバッグなど
===============================================================
(with telnet)
 > telnet localhost 4444
 >> halt
 >> flash probe 0
 >> flash write_image erase TOPPERS-ASP_BlackTank-LPC1769.bin
 >> reset

(with arm-none-eabi-gdb)
 > arm-none-eabi-gdb TOPPERS-ASP_BlackTank-LPC1769.axf
 (gdb) target remote localhost:3333
 (gdb) monitor halt
 >> (gdb) monitor soft_reset_halt
 (gdb) load TOPPERS-ASP_BlackTank-LPC1769.axf
 (gdb) continue

(with lpc21isp)
 > lpc21isp TOPPERS-ASP_BlackTank-LPC1769.hex /dev/ttyUSB0 57600 4000

===============================================================
 ファームウェアに関する既知の問題点
===============================================================

* codecの初期化に失敗することがある。
  -> CMSISのドライバを使った実装に修正したい。

* DMAの開始でカーネルがフリーズすることがある。
  -> デバッガを外したコールドスタートで必ず発生する。

* TLVを組み込んでブートできない。

===============================================================
 基板に関する既知の問題点
===============================================================

* OLEDの電源配線ミス。
  -> 電源の配線を追加する。

* 採用しているスイッチ、NIKKAI HB2-15の感触やクリック音が個体に
  よって異なるので他のスイッチにしたい。
  -> FUJISOKU CFPB-1CC-4W9W が結構良いのでそちらにしたい。

* レギュレータのGNDの配線が細い。
  -> 配線を太く、短くする。

* 基板名やリビジョン、スペシャルサンクスのシルクが入っていない。
  -> ガーバーデータ作成時にレイヤー指定を間違えたかも。
  -> さらにチェックが甘かった。

* RESET, ISPのシルクが入っていない。
  -> ガーバーデータ作成時にレイヤー指定を間違えたかも。
  -> さらにチェックが甘かった。

* オーディオコネクタのどれが何かわからない。シルクを入れたい。
  -> 場所がない。

* デバッグ用LEDが眩しすぎる。意図して高輝度LEDだが、眩しすぎ！
  -> 抵抗値を変更する。

* 通信確認LEDが暗い。
  -> デバッグ用LEDに採用したLEDと同じ物を使う。

* スイッチが微妙な基板端に配置されていてカバーアクリルを作りづらい。
  -> 基板端にするならする。しないなら離す。

* OLEDのノイズ音が気になる。
  -> 初期化パラメータの動作周波数変更で回避可能か？

* OLEDに書き込みを行うとオーディオにノイズが発生する。
  -> 配線がよくない。
  -> 配置がよくない。
  -> 完全分離が必須。

* UART2がネジ穴に近すぎる。
  -> もう少し離して配置したい。

* JTAGコネクタがネジ穴に近い。
  -> もう少し離して配置したい。

* 発振器のパッケージを見直したい。
  -> 小さいパッケージの中ではどれが一般的？

* ボリュームではなく、ロータリーエンコーダにしたい。
  -> ボリュームの初期状態に設定値が縛られるのを避けたい。
  -> クルクル回したい。

* TP1, TP2の位置が使いづらい。
  -> 配線の都合上？

* 発振器がオーディオを愛する人の周波数になっていない。
  -> すいません！

* ポリスイッチのパッケージが違う。

* C31, C32への変なGND配線がある。

* R37のビアがポリスイッチに近すぎる。

* オーディオコネクタのパッケージがおかしい。

* SDカードがレガシーSPIコアを使うようなペリフェラル割り当てになっている。
  -> GPDMAによる転送が使えない。
  -> OLEDよりもSDカードの方が優先度高いんじゃない？

* SDカードを差し込むと電源がドロップする。
  -> Cの容量を増やす。
  -> Lを挿入して突入電流を阻止するか。

* ボリュームのセンス値がフラフラしすぎのような気がするけど？

* 何だかわからない電池BOXをやめて、入手可能なパッケージにしたい。

* MIDI用UARTのコネクタのパッケージに位置決め穴がない。

* MIC INの回路ってこれで良いの？
  -> TI Stellaris LM3S9B96 Development Kitを参考にしている。

===============================================================
 変更履歴
===============================================================
 
